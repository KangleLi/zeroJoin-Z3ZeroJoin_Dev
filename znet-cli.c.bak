// This file is generated by Simplicity Studio.  Please do not edit manually.
//
//

// This file contains the mapping for the command line configuration

#include "app/framework/include/af.h"
#include "app/framework/cli/custom-cli.h"
#include EMBER_AF_API_COMMAND_INTERPRETER2

void findMaskCommand(void);
#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static const char * const networkFindMaskCommandArguments[] = {
  "channel page (0 and 28-31, if sub-GHz support is included)",
  "channel mask",
  NULL
};
#endif


void findModeCommand(void);
#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static const char * const networkFindModeCommandArguments[] = {
  "Bit 0 = enable 2.4GHz, Bit 1 = enable sub-GHz",
  NULL
};
#endif


void findPrintCommand(void);
static EmberCommandEntry emberCommandNetworkFindTable[] = {
  emberCommandEntryActionWithDetails("mask", findMaskCommand, "uw", "Set a channel mask for a given channel page for 'find joinable' and 'f ...", networkFindMaskCommandArguments),
  emberCommandEntryActionWithDetails("mode", findModeCommand, "u", "Set a search mode for 'find joinable' and 'find unused'.", networkFindModeCommandArguments),
  emberCommandEntryActionWithDetails("print", findPrintCommand, "", "Print network search parameters (mode and channel masks).", NULL),
  emberCommandEntryTerminator(),
};
static EmberCommandEntry emberCommandNetworkTable[] = {
  emberCommandEntrySubMenu("find", emberCommandNetworkFindTable, ""),
  emberCommandEntryTerminator(),
};
void emAfMfglibEnableMfglib(void);
#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static const char * const pluginMfglibMfgenableCommandArguments[] = {
  "1 = enable, 0 = disable.",
  NULL
};
#endif


void emAfMfglibProgramEuiCommand(void);
#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static const char * const pluginMfglibProgramEuiCommandArguments[] = {
  "IEEE address to program.",
  NULL
};
#endif


void emAfMfglibSendMessageCommand(void);
#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static const char * const pluginMfglibSendMessageCommandArguments[] = {
  "The hex data to send, up to 16 bytes.",
  "The number of packets to send.",
  NULL
};
#endif


void emAfMfglibSendCommand(void);
#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static const char * const pluginMfglibSendRandomCommandArguments[] = {
  "The number of packets to send.",
  "The length of the packet to send.",
  NULL
};
#endif


void emAfMfglibSendCommand(void);
#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static const char * const pluginMfglibSendTestCommandArguments[] = {
  "The number of packets to send.",
  "The length of the packet to send.",
  NULL
};
#endif


static EmberCommandEntry emberCommandPluginMfglibSendTable[] = {
  emberCommandEntryActionWithDetails("message", emAfMfglibSendMessageCommand, "bv", "Send a test message with the specified data in it.", pluginMfglibSendMessageCommandArguments),
  emberCommandEntryActionWithDetails("random", emAfMfglibSendCommand, "vu", "Send a series of test packets with random data..", pluginMfglibSendRandomCommandArguments),
  emberCommandEntryActionWithDetails("test", emAfMfglibSendCommand, "vu", "Send a series of test packets with fixed data.", pluginMfglibSendTestCommandArguments),
  emberCommandEntryTerminator(),
};
void emAfMfglibSetChannelCommand(void);
#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static const char * const pluginMfglibSetChannelCommandArguments[] = {
  "The 802.15.4 channel number.",
  NULL
};
#endif


void emAfMfglibSetOptions(void);
#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static const char * const pluginMfglibSetOptionsCommandArguments[] = {
  "The options bitmask (0 = normal transmit, 1 = CSMA transmit).",
  NULL
};
#endif


void emAfMfglibSetPowerAndModeCommand(void);
#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static const char * const pluginMfglibSetPowerCommandArguments[] = {
  "The power level",
  "The power mode",
  NULL
};
#endif


void emAfMfglibSleepCommand(void);
#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static const char * const pluginMfglibSleepCommandArguments[] = {
  "Sleep duration (mS).",
  NULL
};
#endif


void emAfMfglibStartCommand(void);
#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static const char * const pluginMfglibStartCommandArguments[] = {
  "Use the Rx callback.",
  NULL
};
#endif


void emAfMfglibStatusCommand(void);
void emAfMfglibStopCommand(void);
void emAfMfglibStreamStartCommand(void);
void emAfMfglibStreamStopCommand(void);
static EmberCommandEntry emberCommandPluginMfglibStreamTable[] = {
  emberCommandEntryActionWithDetails("start", emAfMfglibStreamStartCommand, "", "Start the stream test.", NULL),
  emberCommandEntryActionWithDetails("stop", emAfMfglibStreamStopCommand, "", "Stop the stream test.", NULL),
  emberCommandEntryTerminator(),
};
void emAfMfglibToneStartCommand(void);
void emAfMfglibToneStopCommand(void);
static EmberCommandEntry emberCommandPluginMfglibToneTable[] = {
  emberCommandEntryActionWithDetails("start", emAfMfglibToneStartCommand, "", "Starts a tone test.", NULL),
  emberCommandEntryActionWithDetails("stop", emAfMfglibToneStopCommand, "", "Stops the tone test.", NULL),
  emberCommandEntryTerminator(),
};
static EmberCommandEntry emberCommandPluginMfglibTable[] = {
  emberCommandEntryActionWithDetails("mfgenable", emAfMfglibEnableMfglib, "u", "Enable mfglib.", pluginMfglibMfgenableCommandArguments),
  emberCommandEntryActionWithDetails("programEui", emAfMfglibProgramEuiCommand, "b", "Program EUI.", pluginMfglibProgramEuiCommandArguments),
  emberCommandEntrySubMenu("send", emberCommandPluginMfglibSendTable, ""),
  emberCommandEntryActionWithDetails("set-channel", emAfMfglibSetChannelCommand, "u", "Sets the channel used by the manufacturing library for testing.", pluginMfglibSetChannelCommandArguments),
  emberCommandEntryActionWithDetails("set-options", emAfMfglibSetOptions, "u", "Sets options in the manufacturing library for testing.", pluginMfglibSetOptionsCommandArguments),
  emberCommandEntryActionWithDetails("set-power", emAfMfglibSetPowerAndModeCommand, "sv", "Set the power level and mode for the manufacturing test.", pluginMfglibSetPowerCommandArguments),
  emberCommandEntryActionWithDetails("sleep", emAfMfglibSleepCommand, "v", "Sleep.", pluginMfglibSleepCommandArguments),
  emberCommandEntryActionWithDetails("start", emAfMfglibStartCommand, "u", "Start the mfglib test mode.", pluginMfglibStartCommandArguments),
  emberCommandEntryActionWithDetails("status", emAfMfglibStatusCommand, "", "Prints the current status of the manufacturing library.", NULL),
  emberCommandEntryActionWithDetails("stop", emAfMfglibStopCommand, "", "Stop the mfglib test mode.", NULL),
  emberCommandEntrySubMenu("stream", emberCommandPluginMfglibStreamTable, ""),
  emberCommandEntrySubMenu("tone", emberCommandPluginMfglibToneTable, ""),
  emberCommandEntryTerminator(),
};
static EmberCommandEntry emberCommandPluginTable[] = {
  emberCommandEntrySubMenu("mfglib", emberCommandPluginMfglibTable, ""),
  emberCommandEntryTerminator(),
};
EmberCommandEntry emberCommandTable[] = {
  emberCommandEntrySubMenu("network", emberCommandNetworkTable, ""),
  emberCommandEntrySubMenu("plugin", emberCommandPluginTable, ""),
#ifdef EMBER_AF_ENABLE_CUSTOM_COMMANDS
  CUSTOM_COMMANDS
#endif // EMBER_AF_ENABLE_CUSTOM_COMMANDS
  emberCommandEntryTerminator(),
};
